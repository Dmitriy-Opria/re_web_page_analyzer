// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/Dmitriy-Opria/re_web_page_analyzer/internal/model"
	"github.com/Dmitriy-Opria/re_web_page_analyzer/internal/service"
	"github.com/PuerkitoBio/goquery"
)

type FakeFetcher struct {
	FetchStub        func(string) (*goquery.Document, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		arg1 string
	}
	fetchReturns struct {
		result1 *goquery.Document
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 *goquery.Document
		result2 error
	}
	IsAccessibleStub        func(context.Context, *model.WorkerWrapper) (*model.WorkerWrapper, error)
	isAccessibleMutex       sync.RWMutex
	isAccessibleArgsForCall []struct {
		arg1 context.Context
		arg2 *model.WorkerWrapper
	}
	isAccessibleReturns struct {
		result1 *model.WorkerWrapper
		result2 error
	}
	isAccessibleReturnsOnCall map[int]struct {
		result1 *model.WorkerWrapper
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcher) Fetch(arg1 string) (*goquery.Document, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FetchStub
	fakeReturns := fake.fetchReturns
	fake.recordInvocation("Fetch", []interface{}{arg1})
	fake.fetchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeFetcher) FetchCalls(stub func(string) (*goquery.Document, error)) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = stub
}

func (fake *FakeFetcher) FetchArgsForCall(i int) string {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	argsForCall := fake.fetchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFetcher) FetchReturns(result1 *goquery.Document, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 *goquery.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) FetchReturnsOnCall(i int, result1 *goquery.Document, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 *goquery.Document
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 *goquery.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) IsAccessible(arg1 context.Context, arg2 *model.WorkerWrapper) (*model.WorkerWrapper, error) {
	fake.isAccessibleMutex.Lock()
	ret, specificReturn := fake.isAccessibleReturnsOnCall[len(fake.isAccessibleArgsForCall)]
	fake.isAccessibleArgsForCall = append(fake.isAccessibleArgsForCall, struct {
		arg1 context.Context
		arg2 *model.WorkerWrapper
	}{arg1, arg2})
	stub := fake.IsAccessibleStub
	fakeReturns := fake.isAccessibleReturns
	fake.recordInvocation("IsAccessible", []interface{}{arg1, arg2})
	fake.isAccessibleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFetcher) IsAccessibleCallCount() int {
	fake.isAccessibleMutex.RLock()
	defer fake.isAccessibleMutex.RUnlock()
	return len(fake.isAccessibleArgsForCall)
}

func (fake *FakeFetcher) IsAccessibleCalls(stub func(context.Context, *model.WorkerWrapper) (*model.WorkerWrapper, error)) {
	fake.isAccessibleMutex.Lock()
	defer fake.isAccessibleMutex.Unlock()
	fake.IsAccessibleStub = stub
}

func (fake *FakeFetcher) IsAccessibleArgsForCall(i int) (context.Context, *model.WorkerWrapper) {
	fake.isAccessibleMutex.RLock()
	defer fake.isAccessibleMutex.RUnlock()
	argsForCall := fake.isAccessibleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFetcher) IsAccessibleReturns(result1 *model.WorkerWrapper, result2 error) {
	fake.isAccessibleMutex.Lock()
	defer fake.isAccessibleMutex.Unlock()
	fake.IsAccessibleStub = nil
	fake.isAccessibleReturns = struct {
		result1 *model.WorkerWrapper
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) IsAccessibleReturnsOnCall(i int, result1 *model.WorkerWrapper, result2 error) {
	fake.isAccessibleMutex.Lock()
	defer fake.isAccessibleMutex.Unlock()
	fake.IsAccessibleStub = nil
	if fake.isAccessibleReturnsOnCall == nil {
		fake.isAccessibleReturnsOnCall = make(map[int]struct {
			result1 *model.WorkerWrapper
			result2 error
		})
	}
	fake.isAccessibleReturnsOnCall[i] = struct {
		result1 *model.WorkerWrapper
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.isAccessibleMutex.RLock()
	defer fake.isAccessibleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Fetcher = new(FakeFetcher)
